{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","components/Loader/Loader.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPostId","onSelectedPost","className","length","map","post","userId","title","type","onClick","id","BASE_URL","request","a","endPoint","params","method","fetch","response","json","data","ok","Error","console","log","API","postId","then","filter","el","comment","headers","body","JSON","stringify","Loader","NewCommentForm","addNewComment","useForm","mode","register","handleSubmit","reset","errors","formState","useEffect","Object","keys","onSubmit","required","placeholder","autoComplete","name","email","disabled","Boolean","PostDetails","useState","setPost","comments","setComments","showComments","setShowComments","isLoading","setIsLoading","prev","App","setPosts","selectedUser","setSelectedUser","setSelectedPostId","seIstLoading","useCallback","selectedId","htmlFor","value","onChange","e","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1368a5a.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../react-app-env';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[];\n  selectedPostId: number;\n  onSelectedPost: (selectedId: number) => void;\n};\n\n// eslint-disable-next-line max-len\nexport const PostsList: React.FC<Props> = ({ posts, selectedPostId, onSelectedPost }) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {posts && posts.length ? (\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li\n              key={post.id}\n              className=\"PostsList__item\"\n            >\n              <div>\n                <b>\n                  [User\n                  {post.userId}\n                  ]:\n                </b>\n                {post.title}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => onSelectedPost(post.id)}\n              >\n                {selectedPostId === post.id ? 'Close' : 'Open'}\n              </button>\n            </li>\n          ))}\n        </ul>\n      ) : <p>There are currently no posts</p>}\n    </div>\n  );\n};\n","import { Comment } from '../react-app-env';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\ntype Params = {\n  method: string,\n  headers?: {\n    'Content-Type': string,\n  },\n  body?: string,\n};\n\nconst request = async (endPoint = '', params: Params = { method: 'GET' }) => {\n  try {\n    const response = await fetch(`${BASE_URL}${endPoint}`, params);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error('Error with request');\n    }\n\n    return data;\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log(e);\n\n    return null;\n  }\n};\n\nexport const API = {\n  getPosts: () => request('/posts'),\n  getUserPosts: (userId: number) => request(`/posts?userId=${userId}`),\n  getPostDetails: (postId: number) => request(`/posts/${postId}`),\n  getPostComments: (postId: number) => {\n    return request('/comments')\n      .then(data => data.filter((el: Comment) => el.postId === postId));\n  },\n  deleteComments: (id: number) => request(`/comments/${id}`, { method: 'DELETE' }),\n  addComment: (comment: Partial<Comment>) => request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  }),\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport './NewCommentForm.scss';\n\ntype FormValues = {\n  name: string,\n  email: string,\n  body: string,\n};\n\ntype Props = {\n  addNewComment: (comment: FormValues) => void;\n  selectedPostId: number;\n};\n\n// eslint-disable-next-line max-len\nexport const NewCommentForm: React.FC<Props> = ({ addNewComment, selectedPostId }) => {\n  const {\n    register, handleSubmit, reset, formState: { errors },\n  } = useForm<FormValues>({\n    mode: 'onBlur',\n  });\n  const onSubmit = (data: FormValues) => {\n    addNewComment(data);\n    reset();\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length) {\n      reset();\n    }\n  }, [selectedPostId]);\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit((data: FormValues) => onSubmit(data))}\n    >\n      <div className=\"form-field\">\n        <input\n          {...register('name', { required: true })}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          autoComplete=\"off\"\n        />\n        {errors.name && <p className=\"form-field__error\">This is required</p>}\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          {...register('email', { required: true })}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          autoComplete=\"off\"\n        />\n        {errors.email && <p className=\"form-field__error\">This is required</p>}\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          {...register('body', { required: true })}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n        {errors.body && <p className=\"form-field__error\">This is requiredvv</p>}\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        disabled={Boolean(Object.keys(errors).length)}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { API } from '../../api/api';\nimport { Comment, Post } from '../../react-app-env';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [post, setPost] = useState<Post>();\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [showComments, setShowComments] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const deleteComments = (id: number) => {\n    API.deleteComments(id);\n\n    setComments(prev => prev.filter(el => el.id !== id));\n  };\n\n  const addNewComment = (comment: Partial<Comment>) => {\n    API.addComment({ ...comment, postId: selectedPostId })\n      .then((data) => setComments([...comments, data]));\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    if (selectedPostId !== 0) {\n      API.getPostDetails(selectedPostId)\n        .then(data => setPost(data));\n\n      API.getPostComments(selectedPostId)\n        .then(data => {\n          setComments(data);\n          setIsLoading(false);\n        });\n    }\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {!isLoading ? (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{post?.body}</p>\n          </section>\n\n          {Boolean(comments.length) && (\n            <section className=\"PostDetails__comments\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setShowComments((prev) => !prev)}\n              >\n                {showComments ? 'Hide' : 'Show'}\n                {' '}\n                {comments?.length}\n                {' '}\n                comments\n              </button>\n\n              <ul className=\"PostDetails__list\">\n                {\n                  showComments && (\n                    comments.map(comment => (\n                      <li\n                        key={comment.id}\n                        className=\"PostDetails__list-item\"\n                      >\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                          onClick={() => deleteComments(comment.id)}\n                        >\n                          X\n                        </button>\n                        <p>{comment.body}</p>\n                      </li>\n                    ))\n                  )\n                }\n              </ul>\n            </section>\n          )}\n        </>\n      ) : (\n        <Loader />\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            addNewComment={addNewComment}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { API } from './api/api';\nimport { Loader } from './components/Loader';\nimport { Post } from './react-app-env';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [isLoading, seIstLoading] = useState(false);\n\n  useEffect(() => {\n    seIstLoading(true);\n\n    if (selectedUser) {\n      API.getUserPosts(selectedUser)\n        .then(data => {\n          setPosts(data);\n          seIstLoading(false);\n        });\n    } else {\n      API.getPosts()\n        .then(data => {\n          setPosts(data);\n          seIstLoading(false);\n        });\n    }\n  }, [selectedUser]);\n\n  const onSelectedPost = useCallback((selectedId: number) => {\n    const id = selectedId === selectedPostId ? 0 : selectedId;\n\n    setSelectedPostId(id);\n  }, []);\n\n  return (\n    <div className=\"App\">\n\n      <header className=\"App__header\">\n        <label htmlFor=\"users\">\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            id=\"users\"\n            value={selectedUser}\n            onChange={(e) => setSelectedUser(+e.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <PostsList\n              posts={posts}\n              selectedPostId={selectedPostId}\n              onSelectedPost={onSelectedPost}\n            />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          {\n            selectedPostId\n              ? (\n                <PostDetails selectedPostId={selectedPostId} />\n              ) : (\n                <h2>Post not selected</h2>\n              )\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}